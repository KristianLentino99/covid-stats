{"version":3,"sources":["components/AccordionComponent.js","util/Util.js","components/CasesPerDate.js","components/CalendarComponent.js","components/DataComponent.js","components/SwitchComponent.js","components/Charts/ChartComponent.js","screens/HomePage.js","components/LoaderComponent.js","components/Drawer/DrawerComponent.js","screens/Nations.js","screens/Index.js","services/history.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["AccordionComponent","props","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","UNIX_timestamp","onlyDate","a","Date","months","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","time","timeConverter","this","maintext","Collapse","Body","cases","deaths","recovered","Component","CalendarComponent","state","date_start","date_end","value","options","mode","dateFormat","enableTime","onChange","dates","DataComponent","casesInWorld","deathInWorld","healedInWorld","formattedDate","className","Intl","NumberFormat","format","SwitchComponent","FormControlLabel","control","Switch","size","checked","label","ChartComponent","series","React","useMemo","type","style","height","display","flex","data","axes","tooltip","HomePage","_handleChangeCalendar","setState","isReadyChart","dataForChart","stats","timeseries","length","filterMultipleDates","filterSingleDate","isLoading","lastUpdate","showCalendar","bind","_handleToggleCalendar","items","setInitialState","updateChart","filteredTimeseries","prepareDataForChart","confirmed","last_update","ts","chartAxes","primary","position","returnData","reverse","map","index","timestamp","moment","unix","t","tz","toDate","c","console","log","singleDate","tsDate","parseInt","filter","d","r","start_date","end_date","ts_start","ts_end","arrLen","lastNotEmptyDate","getLastNotEmptyDate","key","paddingLeft","marginRight","justifyContent","LoaderComponent","DrawerComponent","Drawer","anchor","open","onClose","List","name","icon","isLink","link","option","Paper","ListItem","button","onClick","onItemClick","ListItemText","Nations","Index","_handleCloseDrawer","openDrawer","_handleDrawerItemClick","currentPage","toggleDrawer","datas","dataPerDate","Axios","get","then","res","view","renderSwitchComponent","itemsPerDate","history","createBrowserHistory","Routes","basename","process","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3eefe9e2.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Accordion,Card,Button} from 'react-bootstrap';\r\nimport {timeConverter} from \"../util/Util\";\r\n\r\nexport default class AccordionComponent extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Accordion defaultActiveKey=\"1\">\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                            {timeConverter(this.props.maintext)}\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n\r\n                            Cases : {this.props.cases} <br/>\r\n                            Deaths : {this.props.deaths} <br/>\r\n                            Recovered : {this.props.recovered}\r\n\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n","\r\n\r\nexport function timeConverter(UNIX_timestamp,onlyDate=true){\r\n    var a = new Date(UNIX_timestamp * 1000);\r\n    var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    var year = a.getFullYear();\r\n    var month = months[a.getMonth()];\r\n    var date = a.getDate();\r\n    var hour = a.getHours();\r\n    var min = a.getMinutes();\r\n    var sec = a.getSeconds();\r\n    var time = date + ' ' + month + ' ' + year;\r\n    if(!onlyDate){\r\n        time +=' ' + hour + ':' + min + ':' + sec ;\r\n    }\r\n    return time;\r\n}\r\n\r\n\r\n","import React, {Component} from \"react\";\r\nimport AccordionComponent from \"./AccordionComponent\";\r\n\r\nclass CasesPerDate extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            data:null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n            data: this.props.dates\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let {data}= this.state;\r\n        let dates=null;\r\n        if(data){\r\n\r\n            dates=data.map((date)=>{\r\n\r\n                console.log(date);\r\n                return <AccordionComponent maintext={date.t} deaths={date.d} recovered={date.r} cases={date.c} ></AccordionComponent>\r\n            });\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {dates}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CasesPerDate;\r\n","import React, {Component} from \"react\";\r\nimport \"flatpickr/dist/themes/material_green.css\";\r\nimport FlatPickr from 'react-flatpickr';\r\nexport default class CalendarComponent extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            date_start:new Date(),\r\n            date_end:null\r\n        };\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <FlatPickr\r\n                value={this.state.date_start}\r\n                options={{\r\n                    mode:'range',\r\n                    dateFormat: \"d/m/Y\",\r\n                    enableTime:true,\r\n                }}\r\n                onChange={(dates)=>this.props.onChange(dates)}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\n}\r\n","import React from \"react\";\r\n\r\nfunction DataComponent(props) {\r\n\r\n    let {casesInWorld,deathInWorld,healedInWorld,formattedDate}= props;\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <div className=\"flex flex-column p-10\">\r\n                <div>\r\n                    <p>Total Coronavirus cases in the world : {new Intl.NumberFormat('it-IT').format(casesInWorld)}</p>\r\n                </div>\r\n                <div>\r\n                    <p>Total deaths in the world : {new Intl.NumberFormat('it-IT').format(deathInWorld)}</p>\r\n                </div>\r\n                <div>\r\n                    <p>Total healed in the world : {new Intl.NumberFormat('it-IT').format(healedInWorld)}</p>\r\n                </div>\r\n                <div>\r\n                    <p> Last update info : {  formattedDate }</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DataComponent;\r\n","import React from \"react\";\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nfunction SwitchComponent(props){\r\n\r\n    return (\r\n        <FormControlLabel\r\n            control={<Switch size={props.size} checked={props.checked} onChange={()=> props.onChange()} />}\r\n            label=\"Filter per date\"\r\n        />\r\n    );\r\n\r\n}\r\n\r\nexport default SwitchComponent;\r\n","import React from 'react'\r\nimport { Chart } from 'react-charts'\r\n\r\nexport default function ChartComponent(props) {\r\n    /*const data = React.useMemo(\r\n        () => [\r\n            {\r\n                label: 'Series 1',\r\n                data: [[0, 1],[0.5,1], [1, 2], [2, 4], [3, 2], [4, 7]]\r\n            },\r\n            {\r\n                label: 'Series 2',\r\n                data: [[0, 3], [1, 1], [2, 5], [3, 6], [4, 4]]\r\n            }\r\n        ],\r\n        []\r\n    )*/\r\n\r\n    /*const axes = React.useMemo(\r\n        () => [\r\n            { primary: true, type: 'linear', position: 'bottom' },\r\n            { type: 'linear', position: 'left' }\r\n        ],\r\n        []\r\n    )*/\r\n    const series = React.useMemo(\r\n        () => ({\r\n            type: 'area'\r\n        }),\r\n        []\r\n    )\r\n\r\n    const lineChart = (\r\n        // A react-chart hyper-responsively and continuously fills the available\r\n        // space of its parent element automatically\r\n        <div>\r\n            <p>Scale 1:1000</p>\r\n            <div\r\n                className=\"container\"\r\n                style={{\r\n                    height: '600px',\r\n                    display:'flex',\r\n                    flex:1\r\n                }}\r\n            >\r\n\r\n                <Chart data={props.data}  series={series} axes={props.axes} tooltip />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return lineChart;\r\n}\r\n","import React, {Component} from \"react\";\r\nimport CasesPerDate from \"../components/CasesPerDate\";\r\nimport CalendarComponent from \"../components/CalendarComponent\";\r\nimport DataComponent from \"../components/DataComponent\";\r\nimport moment from 'moment';\r\nimport tz from 'moment-timezone';\r\nimport SwitchComponent from \"../components/SwitchComponent\";\r\nimport {Chart} from \"react-charts/dist/index.es\";\r\nimport ChartComponent from \"../components/Charts/ChartComponent\";\r\nclass HomePage extends Component{\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isLoading:true,\r\n            deathInWorld:0,\r\n            casesInWorld:0,\r\n            healedInWorld:0,\r\n            lastUpdate:null,\r\n            showCalendar:false,\r\n            timeseries:null\r\n        };\r\n        this._handleChangeCalendar= this._handleChangeCalendar.bind(this);\r\n        this._handleToggleCalendar= this._handleToggleCalendar.bind(this);\r\n    }\r\n\r\n     async componentDidMount() {\r\n\r\n        if(this.props.items){\r\n\r\n            let {items} = this.props;\r\n\r\n            await this.setInitialState(items);\r\n\r\n            await this.updateChart(this.state.timeseries);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    async updateChart(timeseries) {\r\n\r\n        await this.setState({filteredTimeseries:timeseries});\r\n\r\n        await this.prepareDataForChart(timeseries);\r\n    }\r\n\r\n    async setInitialState(items) {\r\n        await this.setState({\r\n            deathInWorld:items.deaths,\r\n            casesInWorld:items.confirmed,\r\n            healedInWorld:items.recovered,\r\n            lastUpdate: new Date(items.last_update),\r\n            isLoading:false,\r\n            timeseries:items.ts,\r\n            filteredTimeseries:[],\r\n            dataForChart:null,\r\n            isReadyChart:false,\r\n            chartAxes: [\r\n                { primary: true, type: 'time', position: 'bottom' },\r\n                { type: 'linear', position: 'left' }\r\n            ]\r\n        });\r\n    }\r\n\r\n    async prepareDataForChart(timeseries) {\r\n\r\n        let returnData=[];\r\n\r\n        await timeseries.reverse().map((data,index)=>{\r\n            let timestamp= moment.unix(data.t).tz('Europe/Rome');\r\n            returnData[index]={\r\n                label: timestamp.format('DD-MM-YYYY'),\r\n                data: [[timestamp.toDate(),data.c/1000]]\r\n            }\r\n        });\r\n\r\n        console.log(returnData);\r\n        await this.setState({dataForChart:returnData});\r\n\r\n        await this.setState({isReadyChart:true});\r\n\r\n    }\r\n\r\n    filterSingleDate(date,timeseries) {\r\n        let singleDate= moment(date).tz(\"America/New_York\").format('YYYY-MM-DD');\r\n        let tsDate= moment(singleDate).format('X');\r\n        tsDate= parseInt(tsDate) +3600;\r\n\r\n        let filteredTimeseries= timeseries.filter((value => {\r\n            return value.t>=tsDate  && value.t <=tsDate;\r\n        }));\r\n\r\n        this.updateChart(filteredTimeseries);\r\n\r\n        let deathInWorld=0;\r\n        let healedInWorld=0;\r\n        let casesInWorld=0;\r\n        let arrLen=filteredTimeseries.length;\r\n        if(arrLen>0){\r\n            deathInWorld= filteredTimeseries[0].d;\r\n            healedInWorld= filteredTimeseries[0].r;\r\n            casesInWorld= filteredTimeseries[0].c;\r\n        }\r\n\r\n        return {\r\n            deathInWorld,\r\n            healedInWorld,\r\n            casesInWorld\r\n        };\r\n\r\n    }\r\n\r\n    async filterMultipleDates(dates,timeseries) {\r\n\r\n        let start_date= moment(dates[0]).tz('GMT').format('YYYY-MM-DD');\r\n        let end_date= moment(dates[1]).tz('GMT').format('YYYY-MM-DD');\r\n        let ts_start= moment(start_date).format('X');\r\n        let ts_end= parseInt(moment(end_date).format('X'));\r\n        ts_end+=3600;\r\n\r\n        let filteredTimeseries=await  timeseries.filter((value => {\r\n            return value.t>=ts_start  && value.t <=ts_end;\r\n        }));\r\n        console.log(filteredTimeseries);\r\n         this.updateChart(filteredTimeseries);\r\n\r\n        let deathInWorld=0;\r\n        let healedInWorld=0;\r\n        let casesInWorld=0;\r\n        let arrLen=filteredTimeseries.length;\r\n\r\n        if(arrLen>0){\r\n            let lastNotEmptyDate= filteredTimeseries[arrLen-1];\r\n\r\n            if(!lastNotEmptyDate.d){\r\n                lastNotEmptyDate= this.getLastNotEmptyDate(filteredTimeseries);\r\n\r\n            }\r\n\r\n            deathInWorld= filteredTimeseries[0].d;\r\n            healedInWorld= filteredTimeseries[0].r;\r\n            casesInWorld= filteredTimeseries[0].c;\r\n\r\n            if(arrLen>1){\r\n                deathInWorld =   lastNotEmptyDate.d -deathInWorld ;\r\n                healedInWorld = lastNotEmptyDate.r - healedInWorld;\r\n                casesInWorld = lastNotEmptyDate.c - casesInWorld;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            deathInWorld,\r\n            healedInWorld,\r\n            casesInWorld\r\n        };\r\n\r\n    }\r\n\r\n     _handleChangeCalendar=async (dates)=>{\r\n\r\n        this.setState({isReadyChart:false,dataForChart:null});\r\n        let stats=null;\r\n        let {timeseries} = this.state;\r\n        if(dates.length>1){\r\n\r\n            stats=this.filterMultipleDates(dates,timeseries);\r\n\r\n        } else {\r\n           stats= this.filterSingleDate(dates[0],timeseries);\r\n        }\r\n\r\n\r\n        this.setState(stats);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    getLastNotEmptyDate(filteredTimeseries) {\r\n\r\n        for (let key= 0; key<=filteredTimeseries.length;key++){\r\n\r\n            if(filteredTimeseries[key]){\r\n                return filteredTimeseries[key];\r\n            }\r\n\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    _handleToggleCalendar() {\r\n\r\n        this.setState({\r\n            showCalendar:!this.state.showCalendar\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n            let {isLoading,lastUpdate,showCalendar,dataForChart,chartAxes,isReadyChart}=this.state;\r\n            let formattedDate=null;\r\n            if(lastUpdate instanceof Date){\r\n                //getMonth returns value from 0\r\n                let month=lastUpdate.getMonth()+1;\r\n                formattedDate= lastUpdate.getDate()+'/'+ month +'/'+ lastUpdate.getFullYear();\r\n            }\r\n            let data= !isLoading ? (\r\n                <div className=\"mt-5\">\r\n                    <div className=\"flex flex-center row\" style={{paddingLeft:30}}>\r\n                        <div className=\"col-md-6\">\r\n                            <p\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    flex: 1,\r\n                                    marginRight: 35,\r\n                                    justifyContent: 'flex-end'\r\n                                }}\r\n                            >\r\n                                {/*<a onClick={()=>this._handleToggleCalendar()}>Filter per date</a>*/}\r\n                                <SwitchComponent size=\"medium\" checked={showCalendar} onChange={this._handleToggleCalendar}   />\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div className=\"flex-row-start col-md-6\">\r\n                            {\r\n                                this.state.showCalendar ? (\r\n                                    <CalendarComponent onChange={this._handleChangeCalendar}></CalendarComponent>\r\n                                ) : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        isReadyChart ? ( <ChartComponent data={dataForChart} axes={chartAxes} /> ) : null\r\n                    }\r\n                    <DataComponent {...this.state} formattedDate={formattedDate}></DataComponent>\r\n\r\n\r\n                </div>\r\n            ) : null;\r\n            return (\r\n                <div className=\"home\">\r\n                    {/*<div className=\"globe\">\r\n                        <i className=\"fa fa-globe fa-10x\" style={{color: '#fff'}}></i>\r\n                    </div>*/}\r\n                    {data}\r\n                </div>\r\n            )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default HomePage;\r\n","import React, {Component} from \"react\";\r\n\r\n\r\n\r\nclass LoaderComponent extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loader center\">\r\n                <i className=\"fa fa-cog fa-spin fa-7x\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default LoaderComponent;\r\n","import React from \"react\";\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport './DrawerComponent.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\n\r\nexport default function DrawerComponent(props){\r\n\r\n    let options=[\r\n        {\r\n            name:'HomePage',\r\n            icon:'fa fa-globe',\r\n            isLink:true,\r\n            link:'HomePage'\r\n        },\r\n        {\r\n            name:'Nations',\r\n            icon:'fa fa-location-arrow',\r\n            isLink:true,\r\n            link:'Nations'\r\n        },\r\n    ];\r\n\r\n\r\n    return (\r\n\r\n        <Drawer className=\"drawer\" anchor={props.anchor} open={props.open} onClose={()=> props.onClose()}>\r\n            <List className=\"drawer-list\">\r\n                {\r\n                    options.map((option,index)=>(\r\n                        <Paper  key={index}>\r\n                            <ListItem key={index} button onClick={()=>props.onItemClick(option.link)} className=\"drawer-list-item\">\r\n                                <i className={option.icon}></i>\r\n                                <ListItemText className=\"ml-4 pt-2\" primary={<p>{option.name}</p>}></ListItemText>\r\n\r\n                            </ListItem>\r\n                        </Paper>\r\n                    ))\r\n                }\r\n            </List>\r\n        </Drawer>\r\n    );\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\n\r\nclass Nations extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Nations</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default Nations;\r\n","import React, {Component} from \"react\";\r\nimport LoaderComponent from \"../components/LoaderComponent\";\r\nimport HomePage from \"./HomePage\";\r\nimport Axios from \"axios\";\r\nimport Button from '@material-ui/core/Button';\r\nimport DrawerComponent from \"../components/Drawer/DrawerComponent\";\r\nimport Nations from \"./Nations\";\r\nexport default class Index extends Component{\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isLoading:true,\r\n            datas:null,\r\n            dataPerDate:null,\r\n            openDrawer:false,\r\n            currentPage:'HomePage'\r\n        };\r\n\r\n        this._handleCloseDrawer= this._handleCloseDrawer.bind(this);\r\n        this._handleDrawerItemClick= this._handleDrawerItemClick.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        Axios.get(`https://enrichman.github.io/covid19/world/data.json`)\r\n            .then(res => {\r\n                const datas = res.data;\r\n                this.setState({\r\n                    datas,\r\n                    dataPerDate: datas.ts.reverse()\r\n                });\r\n            }).then(()=>this.setState({\r\n\r\n            isLoading:false\r\n        }));\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    _handleCloseDrawer =()=> this.setState({\r\n        openDrawer:false\r\n    });\r\n\r\n\r\n    _handleDrawerItemClick= (currentPage)=>this.setState({currentPage});\r\n\r\n     toggleDrawer= (openDrawer)=> this.setState({openDrawer});\r\n\r\n    render() {\r\n        let {openDrawer}= this.state;\r\n\r\n        console.log(this.state.datas);\r\n        let view = this.state.isLoading ? (\r\n            <LoaderComponent></LoaderComponent>\r\n        ) : (\r\n            <div>\r\n                <DrawerComponent onItemClick={this._handleDrawerItemClick} anchor=\"left\" open={openDrawer} onClose={this._handleCloseDrawer} />\r\n                <header className=\"App-header p-2   \">\r\n                    <p>Covid Site</p>\r\n                    <div className=\"flex justify-content-end\">\r\n                        <Button variant=\"outlined\" onClick={()=>this.toggleDrawer(true)} ><i className=\"fa fa-bars fa-3x \"></i></Button>\r\n                    </div>\r\n                </header>\r\n                { this.renderSwitchComponent() }\r\n            </div>\r\n        );\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                {view}\r\n            </div>\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    renderSwitchComponent() {\r\n\r\n        let {datas,dataPerDate,currentPage}= this.state;\r\n\r\n        switch (currentPage) {\r\n            case \"HomePage\":\r\n                return (<HomePage  items={datas} itemsPerDate={dataPerDate}></HomePage>);\r\n                break\r\n            case 'Nations':\r\n                return (<Nations></Nations>);\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import { createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\nexport default history;\r\n","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport HomePage from \"../screens/HomePage\";\r\nimport Index from \"../screens/Index\";\r\nimport Nations from \"../screens/Nations\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport history from '../services/history';\r\nexport default function Routes() {\r\n    return (\r\n        <BrowserRouter history={history} basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Index} />\r\n                <Route path=\"/home\" component={HomePage} />\r\n                <Route path=\"/nations\" component={Nations} />\r\n\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n","import React, {Component} from 'react';\nimport {Switch,Route} from 'react-router-dom';\nimport './App.css';\nimport { Router } from 'react-router-dom';\nimport Routes from './components/Routes';\n\nclass App extends Component{\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        return(\n\n            <Routes />\n\n        )\n\n    }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}