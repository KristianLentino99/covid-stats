{"version":3,"sources":["components/AccordionComponent.js","util/Util.js","components/CasesPerDate.js","components/CalendarComponent.js","components/DataComponent.js","components/SwitchComponent.js","screens/HomePage.js","components/LoaderComponent.js","components/Drawer/DrawerComponent.js","screens/Index.js","screens/Nations.js","services/history.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["AccordionComponent","props","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","UNIX_timestamp","onlyDate","a","Date","months","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","time","timeConverter","this","maintext","Collapse","Body","cases","deaths","recovered","Component","CalendarComponent","state","date_start","date_end","value","options","mode","dateFormat","enableTime","onChange","dates","DataComponent","casesInWorld","deathInWorld","healedInWorld","formattedDate","className","Intl","NumberFormat","format","SwitchComponent","FormControlLabel","control","Switch","size","checked","label","HomePage","_handleChangeCalendar","start_date","moment","tz","end_date","ts_start","ts_end","timeseries","filter","t","filteredTimeseries","console","log","arrLen","length","lastNotEmptyDate","d","getLastNotEmptyDate","r","c","setState","isLoading","lastUpdate","showCalendar","bind","_handleToggleCalendar","items","confirmed","last_update","ts","key","total","totD","data","style","paddingLeft","display","flex","marginRight","justifyContent","color","LoaderComponent","DrawerComponent","Drawer","anchor","open","onClose","List","name","icon","isLink","link","map","option","index","ListItem","button","ListItemText","primary","Link","href","Index","_handleCloseDrawer","openDrawer","toggleDrawer","datas","dataPerDate","Axios","get","then","res","reverse","view","onClick","itemsPerDate","Nations","history","createBrowserHistory","Routes","basename","process","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2SAIqBA,E,kDAEjB,WAAYC,GAAQ,uCACVA,G,qDAKN,OACI,kBAACC,EAAA,EAAD,CAAWC,iBAAiB,KACxB,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,KACI,kBAACH,EAAA,EAAUI,OAAX,CAAkBC,GAAIC,IAAQC,QAAQ,OAAOC,SAAS,KCdvE,SAAuBC,GAA8B,IAAfC,IAAc,yDACnDC,EAAI,IAAIC,KAAsB,IAAjBH,GACbI,EAAS,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAC5EC,EAAOH,EAAEI,cACTC,EAAQH,EAAOF,EAAEM,YACjBC,EAAOP,EAAEQ,UACTC,EAAOT,EAAEU,WACTC,EAAMX,EAAEY,aACRC,EAAMb,EAAEc,aACRC,EAAOR,EAAO,IAAMF,EAAQ,IAAMF,EAItC,OAHIJ,IACAgB,GAAO,IAAMN,EAAO,IAAME,EAAM,IAAME,GAEnCE,EDEkBC,CAAcC,KAAK7B,MAAM8B,YAGlC,kBAAC7B,EAAA,EAAU8B,SAAX,CAAoBtB,SAAS,KACzB,kBAACN,EAAA,EAAK6B,KAAN,gBAEaH,KAAK7B,MAAMiC,MAFxB,IAE+B,6BAF/B,YAGcJ,KAAK7B,MAAMkC,OAHzB,IAGiC,6BAHjC,eAIiBL,KAAK7B,MAAMmC,kB,GArBJC,a,GEDrBA,Y,sBCANC,E,kDACjB,WAAYrC,GAAQ,IAAD,8BACf,cAAMA,IACDsC,MAAM,CACPC,WAAW,IAAI1B,KACf2B,SAAS,MAJE,E,kGAUT,IAAD,OAEL,OACI,kBAAC,IAAD,CACIC,MAAOZ,KAAKS,MAAMC,WAClBG,QAAS,CACLC,KAAK,QACLC,WAAY,QACZC,YAAW,GAEfC,SAAU,SAACC,GAAD,OAAS,EAAK/C,MAAM8C,SAASC,U,GArBRX,aCsBhCY,MAvBf,SAAuBhD,GAAQ,IAEtBiD,EAAwDjD,EAAxDiD,aAAaC,EAA2ClD,EAA3CkD,aAAaC,EAA8BnD,EAA9BmD,cAAcC,EAAgBpD,EAAhBoD,cAC7C,OACI,yBAAKC,UAAU,aACX,6BACI,qEAA2C,IAAIC,KAAKC,aAAa,SAASC,OAAOP,KAErF,6BACI,0DAAgC,IAAIK,KAAKC,aAAa,SAASC,OAAON,KAE1E,6BACI,0DAAgC,IAAII,KAAKC,aAAa,SAASC,OAAOL,KAE1E,6BACI,kDAA0BC,M,2CCH3BK,MAXf,SAAyBzD,GAErB,OACI,kBAAC0D,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAQC,KAAM7D,EAAM6D,KAAMC,QAAS9D,EAAM8D,QAAShB,SAAU,kBAAK9C,EAAM8C,cAChFiB,MAAM,qBC6KHC,E,kDA3KX,WAAYhE,GAAQ,IAAD,8BACf,cAAMA,IAmCTiE,sBApCkB,uCAoCI,WAAOlB,GAAP,mCAAAnC,EAAA,6DAGfsD,EAAYC,IAAOpB,EAAM,IAAIqB,GAAG,eAAeZ,OAAO,cACtDa,EAAUF,IAAOpB,EAAM,IAAIqB,GAAG,eAAeZ,OAAO,cACpDc,EAAUH,IAAOD,GAAYV,OAAO,KACpCe,EAAQJ,IAAOE,GAAUb,OAAO,KAE/BgB,EAAc,EAAKlC,MAAnBkC,WARc,SASUA,EAAWC,QAAQ,SAAAhC,GAE5C,OAAOA,EAAMiC,GAAGJ,GAAa7B,EAAMiC,GAAIH,KAXxB,OASfI,EATe,OAanBC,QAAQC,IAAIF,GACRzB,EAAa,EACbC,EAAc,EACdF,EAAa,GACb6B,EAAOH,EAAmBI,QAEpB,KACFC,EAAkBL,EAAmBG,EAAO,IAE3BG,IACjBD,EAAkB,EAAKE,oBAAoBP,GAC3CC,QAAQC,IAAIG,IAGhB9B,EAAcyB,EAAmB,GAAGM,EACpC9B,EAAewB,EAAmB,GAAGQ,EACrClC,EAAc0B,EAAmB,GAAGS,EACjCN,EAAO,IACN5B,GAAkB8B,EAAiBC,EACnC9B,GAAiB6B,EAAiBG,EAClClC,GAAgB+B,EAAiBI,IAOzC,EAAKC,SAAS,CACVnC,eACAC,gBACAF,iBA3Ce,4CApCJ,sDAEf,EAAKX,MAAM,CACPgD,WAAU,EACVpC,aAAa,EACbD,aAAa,EACbE,cAAc,EACdoC,WAAW,KACXC,cAAa,EACbhB,WAAW,MAEf,EAAKP,sBAAuB,EAAKA,sBAAsBwB,KAA3B,gBAC5B,EAAKC,sBAAuB,EAAKA,sBAAsBD,KAA3B,gBAZb,E,gEAiBf,GAAG5D,KAAK7B,MAAM2F,MAAM,CAAC,IAEZA,EAAS9D,KAAK7B,MAAd2F,MACL9D,KAAKwD,SAAS,CACVnC,aAAayC,EAAMzD,OACnBe,aAAa0C,EAAMC,UACnBzC,cAAcwC,EAAMxD,UACpBoD,WAAY,IAAI1E,KAAK8E,EAAME,aAC3BP,WAAU,EACVd,WAAWmB,EAAMG,GACjBnB,mBAAmB,Q,0CA4DXA,GAEhB,IAAK,IAAIoB,EAAK,EAAGA,GAAKpB,EAAmBI,OAAOgB,IAE5C,GAAGpB,EAAmBoB,GAClB,OAAOpB,EAAmBoB,GAKlC,OAAO,O,mCAGEC,E,GAAY,IAALf,EAAI,EAAJA,EAEZgB,EAAKD,EAMT,MALiB,iBAAPA,IACNC,EAAMD,EAAMf,GAITgB,EAAOhB,I,+BAGR,IAAD,EAEuCpD,KAAKS,MAAxCgD,EAFJ,EAEIA,UAAUC,EAFd,EAEcA,WAAWC,EAFzB,EAEyBA,aACtBpC,EAAc,KAClB,GAAGmC,aAAsB1E,KAAK,CAE1B,IAAII,EAAMsE,EAAWrE,WAAW,EAChCkC,EAAemC,EAAWnE,UAAU,IAAKH,EAAO,IAAKsE,EAAWvE,cAEpE,IAAIkF,EAAOZ,EA8BP,KA7BA,yBAAKjC,UAAU,QAGX,kBAAC,EAAD,iBAAmBxB,KAAKS,MAAxB,CAA+Bc,cAAeA,KAC9C,yBAAKC,UAAU,uBAAuB8C,MAAO,CAACC,YAAY,KACtD,yBAAK/C,UAAU,YACX,uBACI8C,MAAO,CACHE,QAAS,OACTC,KAAM,EACNC,YAAa,GACbC,eAAgB,aAIpB,kBAAC,EAAD,CAAiB3C,KAAK,SAASC,QAAS0B,EAAc1C,SAAUjB,KAAK6D,0BAI7E,yBAAKrC,UAAU,2BAEPxB,KAAKS,MAAMkD,aACP,kBAAC,EAAD,CAAmB1C,SAAUjB,KAAKoC,wBAClC,QAOxB,OACI,yBAAKZ,UAAU,QACX,yBAAKA,UAAU,SACX,uBAAGA,UAAU,qBAAqB8C,MAAO,CAACM,MAAO,WAEpDP,K,8CAObrE,KAAKwD,SAAS,CACVG,cAAc3D,KAAKS,MAAMkD,mB,GAvKdpD,aCeRsE,E,kDAhBX,WAAY1G,GAAQ,uCACVA,G,qDAKN,OACI,yBAAKqD,UAAU,iBACX,uBAAGA,UAAU,iC,GAVCjB,a,gFCMf,SAASuE,EAAgB3G,GAUpC,OAEI,kBAAC4G,EAAA,EAAD,CAAQvD,UAAU,SAASwD,OAAQ7G,EAAM6G,OAAQC,KAAM9G,EAAM8G,KAAMC,QAAS,kBAAK/G,EAAM+G,YACnF,kBAACC,EAAA,EAAD,CAAM3D,UAAU,eAXZ,CACR,CACI4D,KAAK,UACLC,KAAK,uBACLC,QAAO,EACPC,KAAK,YAQWC,KAAI,SAACC,EAAOC,GAAR,OAER,kBAACC,EAAA,EAAD,CAAUzB,IAAKwB,EAAOE,QAAM,EAACpE,UAAU,oBACnC,uBAAGA,UAAWiE,EAAOJ,OACrB,kBAACQ,EAAA,EAAD,CAAcrE,UAAU,OAAOsE,QAAS,kBAACC,EAAA,EAAD,CAAMC,KAAK,YAAYP,EAAOL,c,ICvB7Ea,E,kDAEjB,WAAY9H,GAAQ,IAAD,8BACf,cAAMA,IA+BV+H,mBAAoB,kBAAK,EAAK1C,SAAS,CACnC2C,YAAW,KAjCI,EAqClBC,aAAc,SAACD,GAAD,OAAe,EAAK3C,SAAS,CAAC2C,gBAnCzC,EAAK1F,MAAM,CACPgD,WAAU,EACV4C,MAAM,KACNC,YAAY,KACZH,YAAW,GAGf,EAAKD,mBAAoB,EAAKA,mBAAmBtC,KAAxB,gBATV,E,gEAaE,IAAD,OAEhB2C,IAAMC,IAAN,uDACKC,MAAK,SAAAC,GACF,IAAML,EAAQK,EAAIrC,KAClB,EAAKb,SAAS,CACV6C,QACAC,YAAaD,EAAMpC,GAAG0C,eAE3BF,MAAK,kBAAI,EAAKjD,SAAS,CAE1BC,WAAU,S,+BAeR,IAAD,SAC+BzD,KAAKS,MAApC4F,EADA,EACAA,MAAMC,EADN,EACMA,YAAYH,EADlB,EACkBA,WAEvBpD,QAAQC,IAAIhD,KAAKS,MAAM4F,OACvB,IAAIO,EAAO5G,KAAKS,MAAMgD,UAClB,kBAAC,EAAD,MAEA,6BACI,kBAAC,EAAD,CAAiBuB,OAAO,OAAOC,KAAMkB,EAAYjB,QAASlF,KAAKkG,qBAC/D,4BAAQ1E,UAAU,qBACd,yCACA,yBAAKA,UAAU,4BACX,kBAAC,IAAD,CAAQ7C,QAAQ,WAAWkI,QAAS,kBAAI,EAAKT,cAAa,KAAQ,uBAAG5E,UAAU,yBAGvF,kBAAC,EAAD,CAAWsC,MAAOuC,EAAOS,aAAcR,KAG/C,OAEI,yBAAK9E,UAAU,OACVoF,O,GA9DkBrG,aCapBwG,E,kDAfX,WAAY5I,GAAQ,uCACVA,G,qDAKN,OACI,6BACI,2C,GATMoC,a,gBCDPyG,EADCC,cCMD,SAASC,IACpB,OACI,kBAAC,IAAD,CAAeF,QAASA,EAASG,SAAUC,gBACvC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWtB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,QAAQE,UAAWpF,IAC/B,kBAAC,IAAD,CAAOkF,KAAK,WAAWE,UAAWR,M,ICYnCS,E,kDAjBX,WAAYrJ,GAAQ,uCACVA,G,qDAKN,OAEI,kBAAC+I,EAAD,U,GAVM3G,aCMEkH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1F,QAAQ0F,MAAMA,EAAMC,a","file":"static/js/main.6c95f02d.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Accordion,Card,Button} from 'react-bootstrap';\r\nimport {timeConverter} from \"../util/Util\";\r\n\r\nexport default class AccordionComponent extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Accordion defaultActiveKey=\"1\">\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                            {timeConverter(this.props.maintext)}\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n\r\n                            Cases : {this.props.cases} <br/>\r\n                            Deaths : {this.props.deaths} <br/>\r\n                            Recovered : {this.props.recovered}\r\n\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n","\r\n\r\nexport function timeConverter(UNIX_timestamp,onlyDate=true){\r\n    var a = new Date(UNIX_timestamp * 1000);\r\n    var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    var year = a.getFullYear();\r\n    var month = months[a.getMonth()];\r\n    var date = a.getDate();\r\n    var hour = a.getHours();\r\n    var min = a.getMinutes();\r\n    var sec = a.getSeconds();\r\n    var time = date + ' ' + month + ' ' + year;\r\n    if(!onlyDate){\r\n        time +=' ' + hour + ':' + min + ':' + sec ;\r\n    }\r\n    return time;\r\n}\r\n\r\n\r\n","import React, {Component} from \"react\";\r\nimport AccordionComponent from \"./AccordionComponent\";\r\n\r\nclass CasesPerDate extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            data:null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n            data: this.props.dates\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let {data}= this.state;\r\n        let dates=null;\r\n        if(data){\r\n\r\n            dates=data.map((date)=>{\r\n\r\n                console.log(date);\r\n                return <AccordionComponent maintext={date.t} deaths={date.d} recovered={date.r} cases={date.c} ></AccordionComponent>\r\n            });\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {dates}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CasesPerDate;\r\n","import React, {Component} from \"react\";\r\nimport \"flatpickr/dist/themes/material_green.css\";\r\nimport FlatPickr from 'react-flatpickr';\r\nexport default class CalendarComponent extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            date_start:new Date(),\r\n            date_end:null\r\n        };\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <FlatPickr\r\n                value={this.state.date_start}\r\n                options={{\r\n                    mode:'range',\r\n                    dateFormat: \"d/m/Y\",\r\n                    enableTime:true,\r\n                }}\r\n                onChange={(dates)=>this.props.onChange(dates)}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\n}\r\n","import React from \"react\";\r\n\r\nfunction DataComponent(props) {\r\n\r\n    let {casesInWorld,deathInWorld,healedInWorld,formattedDate}= props;\r\n    return (\r\n        <div className=\"container\">\r\n            <div>\r\n                <p>Total Coronavirus cases in the world : {new Intl.NumberFormat('it-IT').format(casesInWorld)}</p>\r\n            </div>\r\n            <div>\r\n                <p>Total deaths in the world : {new Intl.NumberFormat('it-IT').format(deathInWorld)}</p>\r\n            </div>\r\n            <div>\r\n                <p>Total healed in the world : {new Intl.NumberFormat('it-IT').format(healedInWorld)}</p>\r\n            </div>\r\n            <div>\r\n                <p> Last update info : {  formattedDate }</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DataComponent;\r\n","import React from \"react\";\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nfunction SwitchComponent(props){\r\n\r\n    return (\r\n        <FormControlLabel\r\n            control={<Switch size={props.size} checked={props.checked} onChange={()=> props.onChange()} />}\r\n            label=\"Filter per date\"\r\n        />\r\n    );\r\n\r\n}\r\n\r\nexport default SwitchComponent;\r\n","import React, {Component} from \"react\";\r\nimport CasesPerDate from \"../components/CasesPerDate\";\r\nimport CalendarComponent from \"../components/CalendarComponent\";\r\nimport DataComponent from \"../components/DataComponent\";\r\nimport moment from 'moment';\r\nimport tz from 'moment-timezone';\r\nimport SwitchComponent from \"../components/SwitchComponent\";\r\nclass HomePage extends Component{\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isLoading:true,\r\n            deathInWorld:0,\r\n            casesInWorld:0,\r\n            healedInWorld:0,\r\n            lastUpdate:null,\r\n            showCalendar:false,\r\n            timeseries:null\r\n        };\r\n        this._handleChangeCalendar= this._handleChangeCalendar.bind(this);\r\n        this._handleToggleCalendar= this._handleToggleCalendar.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if(this.props.items){\r\n\r\n            let {items} = this.props;\r\n            this.setState({\r\n                deathInWorld:items.deaths,\r\n                casesInWorld:items.confirmed,\r\n                healedInWorld:items.recovered,\r\n                lastUpdate: new Date(items.last_update),\r\n                isLoading:false,\r\n                timeseries:items.ts,\r\n                filteredTimeseries:[]\r\n            });\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n     _handleChangeCalendar=async (dates)=>{\r\n\r\n\r\n        let start_date= moment(dates[0]).tz(\"Europe/Rome\").format('YYYY-MM-DD');\r\n        let end_date= moment(dates[1]).tz(\"Europe/Rome\").format('YYYY-MM-DD');\r\n        let ts_start= moment(start_date).format('X');\r\n        let ts_end= moment(end_date).format('X');\r\n\r\n        let {timeseries} = this.state;\r\n        let filteredTimeseries=await timeseries.filter((value => {\r\n\r\n            return value.t>=ts_start  && value.t <=ts_end;\r\n        }));\r\n        console.log(filteredTimeseries);\r\n        let deathInWorld=0;\r\n        let healedInWorld=0;\r\n        let casesInWorld=0;\r\n        let arrLen=filteredTimeseries.length;\r\n\r\n        if(arrLen>0){\r\n            let lastNotEmptyDate= filteredTimeseries[arrLen-1];\r\n\r\n            if(!lastNotEmptyDate.d){\r\n                lastNotEmptyDate= this.getLastNotEmptyDate(filteredTimeseries);\r\n                console.log(lastNotEmptyDate);\r\n            }\r\n\r\n            deathInWorld= filteredTimeseries[0].d;\r\n            healedInWorld= filteredTimeseries[0].r;\r\n            casesInWorld= filteredTimeseries[0].c;\r\n            if(arrLen>1){\r\n                deathInWorld -=   lastNotEmptyDate.d;\r\n                healedInWorld -= lastNotEmptyDate.r;\r\n                casesInWorld -= lastNotEmptyDate.c;\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        this.setState({\r\n            deathInWorld,\r\n            healedInWorld,\r\n            casesInWorld\r\n\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    getLastNotEmptyDate(filteredTimeseries) {\r\n\r\n        for (let key= 0; key<=filteredTimeseries.length;key++){\r\n\r\n            if(filteredTimeseries[key]){\r\n                return filteredTimeseries[key];\r\n            }\r\n\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n    reduceDeaths(total,{d}) {\r\n\r\n        let totD=total;\r\n        if(typeof total=='object'){\r\n            totD= total.d;\r\n        }\r\n\r\n\r\n        return totD + d;\r\n    }\r\n\r\n    render() {\r\n\r\n            let {isLoading,lastUpdate,showCalendar}=this.state;\r\n            let formattedDate=null;\r\n            if(lastUpdate instanceof Date){\r\n                //getMonth returns value from 0\r\n                let month=lastUpdate.getMonth()+1;\r\n                formattedDate= lastUpdate.getDate()+'/'+ month +'/'+ lastUpdate.getFullYear();\r\n            }\r\n            let data= !isLoading ? (\r\n                <div className=\"mt-5\">\r\n\r\n\r\n                    <DataComponent {...this.state} formattedDate={formattedDate}></DataComponent>\r\n                    <div className=\"flex flex-center row\" style={{paddingLeft:30}}>\r\n                        <div className=\"col-md-6\">\r\n                            <p\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    flex: 1,\r\n                                    marginRight: 35,\r\n                                    justifyContent: 'flex-end'\r\n                                }}\r\n                            >\r\n                                {/*<a onClick={()=>this._handleToggleCalendar()}>Filter per date</a>*/}\r\n                                <SwitchComponent size=\"normal\" checked={showCalendar} onChange={this._handleToggleCalendar}   />\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div className=\"flex-row-start col-md-6\">\r\n                            {\r\n                                this.state.showCalendar ? (\r\n                                    <CalendarComponent onChange={this._handleChangeCalendar}></CalendarComponent>\r\n                                ) : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            ) : null;\r\n            return (\r\n                <div className=\"home\">\r\n                    <div className=\"globe\">\r\n                        <i className=\"fa fa-globe fa-10x\" style={{color: '#fff'}}></i>\r\n                    </div>\r\n                    {data}\r\n                </div>\r\n            )\r\n    }\r\n\r\n    _handleToggleCalendar() {\r\n\r\n        this.setState({\r\n            showCalendar:!this.state.showCalendar\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default HomePage;\r\n","import React, {Component} from \"react\";\r\n\r\n\r\n\r\nclass LoaderComponent extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loader center\">\r\n                <i className=\"fa fa-cog fa-spin fa-7x\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default LoaderComponent;\r\n","import React from \"react\";\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport './DrawerComponent.css';\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nexport default function DrawerComponent(props){\r\n\r\n    let options=[\r\n        {\r\n            name:'Nations',\r\n            icon:'fa fa-location-arrow',\r\n            isLink:true,\r\n            link:'/nation'\r\n        },\r\n    ];\r\n    return (\r\n\r\n        <Drawer className=\"drawer\" anchor={props.anchor} open={props.open} onClose={()=> props.onClose()}>\r\n            <List className=\"drawer-list\">\r\n                {\r\n                    options.map((option,index)=>(\r\n\r\n                        <ListItem key={index} button className=\"drawer-list-item\">\r\n                            <i className={option.icon}></i>\r\n                            <ListItemText className=\"ml-4\" primary={<Link href=\"/nations\">{option.name}</Link>}></ListItemText>\r\n                        </ListItem>\r\n                    ))\r\n                }\r\n            </List>\r\n        </Drawer>\r\n    );\r\n}\r\n","import React, {Component} from \"react\";\r\nimport LoaderComponent from \"../components/LoaderComponent\";\r\nimport HomePage from \"./HomePage\";\r\nimport Axios from \"axios\";\r\nimport Button from '@material-ui/core/Button';\r\nimport DrawerComponent from \"../components/Drawer/DrawerComponent\";\r\nexport default class Index extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isLoading:true,\r\n            datas:null,\r\n            dataPerDate:null,\r\n            openDrawer:false\r\n        };\r\n\r\n        this._handleCloseDrawer= this._handleCloseDrawer.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        Axios.get(`https://enrichman.github.io/covid19/world/data.json`)\r\n            .then(res => {\r\n                const datas = res.data;\r\n                this.setState({\r\n                    datas,\r\n                    dataPerDate: datas.ts.reverse()\r\n                });\r\n            }).then(()=>this.setState({\r\n\r\n            isLoading:false\r\n        }));\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    _handleCloseDrawer =()=> this.setState({\r\n        openDrawer:false\r\n    });\r\n\r\n\r\n     toggleDrawer= (openDrawer)=> this.setState({openDrawer});\r\n\r\n    render() {\r\n        let {datas,dataPerDate,openDrawer}= this.state;\r\n\r\n        console.log(this.state.datas);\r\n        let view = this.state.isLoading ? (\r\n            <LoaderComponent></LoaderComponent>\r\n        ) : (\r\n            <div>\r\n                <DrawerComponent anchor=\"left\" open={openDrawer} onClose={this._handleCloseDrawer} />\r\n                <header className=\"App-header p-2   \">\r\n                    <p>Covid Site</p>\r\n                    <div className=\"flex justify-content-end\">\r\n                        <Button variant=\"outlined\" onClick={()=>this.toggleDrawer(true)} ><i className=\"fa fa-bars fa-3x \"></i></Button>\r\n                    </div>\r\n                </header>\r\n                <HomePage  items={datas} itemsPerDate={dataPerDate}></HomePage>\r\n            </div>\r\n        );\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                {view}\r\n            </div>\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\n\r\nclass Nations extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Nations</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default Nations;\r\n","import { createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\nexport default history;\r\n","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport HomePage from \"../screens/HomePage\";\r\nimport Index from \"../screens/Index\";\r\nimport Nations from \"../screens/Nations\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport history from '../services/history';\r\nexport default function Routes() {\r\n    return (\r\n        <BrowserRouter history={history} basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Index} />\r\n                <Route path=\"/home\" component={HomePage} />\r\n                <Route path=\"/nations\" component={Nations} />\r\n\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n","import React, {Component} from 'react';\nimport {Switch,Route} from 'react-router-dom';\nimport './App.css';\nimport { Router } from 'react-router-dom';\nimport Routes from './components/Routes';\n\nclass App extends Component{\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        return(\n\n            <Routes />\n\n        )\n\n    }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}