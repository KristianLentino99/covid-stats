{"version":3,"sources":["components/CalendarComponent.js","components/DataComponent.js","components/SwitchComponent.js","components/Charts/ChartComponent.js","components/LoaderComponent.js","screens/HomePage.js","components/NationDataComponent.js","screens/Nations.js","components/Drawer/DrawerComponent.js","components/HeaderComponent.js","components/WorldMapComponent.js","screens/WorldMap.js","screens/Index.js","services/history.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["CalendarComponent","dates","this","props","value","options","mode","dateFormat","enableTime","onChange","Component","DataComponent","casesInWorld","deathInWorld","healedInWorld","formattedDate","className","Intl","NumberFormat","format","Math","abs","SwitchComponent","FormControlLabel","control","Switch","size","checked","label","ChartComponent","series","React","useMemo","type","data","length","style","height","display","flex","axes","tooltip","LoaderComponent","HomePage","_handleChangeCalendar","a","setState","isReadyChart","isLoading","dataForChart","stats","timeseries","state","filterMultipleDates","filterSingleDate","period","lastUpdate","showCalendar","bind","_handleToggleCalendar","items","setInitialState","updateChart","filteredTimeseries","prepareDataForChart","deaths","confirmed","recovered","Date","last_update","ts","chartAxes","primary","time","unit","position","returnData","reverse","map","index","timestamp","moment","unix","t","tz","toDate","c","date","singleDate","tsDate","parseInt","dayBeforeTs","filter","dayBeforeStats","console","log","d","r","start_date","end_date","ts_start","ts_end","arrLen","lastNotEmptyDate","getLastNotEmptyDate","key","month","getMonth","getDate","getFullYear","paddingLeft","marginRight","justifyContent","NationDataComponent","todayCases","todayDeaths","casesPerOneMillion","deathsPerOneMillion","cases","active","critical","Paper","Nations","_handleOnChange","selectedOption","fetchData","nations","Axios","get","then","res","nation","name","toLowerCase","result","status","dataComponent","view","placeholder","DrawerComponent","Drawer","anchor","open","onClose","List","icon","isLink","link","option","ListItem","button","onClick","onItemClick","ListItemText","HeaderComponent","toggleDrawer","openDrawer","drawerItemClick","page","href","Button","variant","retrieveData","memo","setTooltipContent","showTooltipData","NAME","POP_EST","data-tip","projectionConfig","scale","geography","geographies","geo","rsmKey","onMouseEnter","properties","onMouseLeave","default","fill","outline","hover","pressed","WorldMap","useState","content","setContent","html","Index","_handleDrawerItemClick","currentPage","datas","dataPerDate","renderSwitchComponent","itemsPerDate","history","createBrowserHistory","Routes","basename","process","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1df85da9.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"flatpickr/dist/themes/material_green.css\";\r\nimport FlatPickr from 'react-flatpickr';\r\nexport default class CalendarComponent extends Component{\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n    render() {\r\n        let {dates}= this.props;\r\n        return (\r\n            <FlatPickr\r\n                value={dates}\r\n                options={{\r\n                    mode:'range',\r\n                    dateFormat: \"d/m/Y\",\r\n                    enableTime:true,\r\n\r\n                }}\r\n                onChange={(dates)=>this.props.onChange(dates)}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\n}\r\n","import React from \"react\";\r\n\r\nfunction DataComponent(props) {\r\n\r\n    let {casesInWorld,deathInWorld,healedInWorld,formattedDate}= props;\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <div className=\"flex flex-column p-10\">\r\n                <div>\r\n                    <p>Total Coronavirus cases in the world : {new Intl.NumberFormat('it-IT').format(Math.abs(casesInWorld))}</p>\r\n                </div>\r\n                <div>\r\n                    <p>Total deaths in the world : {new Intl.NumberFormat('it-IT').format(Math.abs(deathInWorld))}</p>\r\n                </div>\r\n                <div>\r\n                    <p>Total healed in the world : {new Intl.NumberFormat('it-IT').format(Math.abs(healedInWorld))}</p>\r\n                </div>\r\n                <div>\r\n                    <p> Last update info : {  formattedDate }</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DataComponent;\r\n","import React from \"react\";\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nfunction SwitchComponent(props){\r\n\r\n    return (\r\n        <FormControlLabel\r\n            control={<Switch size={props.size} checked={props.checked} onChange={()=> props.onChange()} />}\r\n            label=\"Filter per date\"\r\n        />\r\n    );\r\n\r\n}\r\n\r\nexport default SwitchComponent;\r\n","import React from 'react'\r\nimport { Chart } from 'react-charts'\r\n\r\nexport default function ChartComponent(props) {\r\n\r\n    const series = React.useMemo(\r\n        () => ({\r\n            type: 'area'\r\n        }),\r\n        []\r\n    )\r\n\r\n    const {data}=props;\r\n    const lineChart = data.length>0 ? (\r\n        // A react-chart hyper-responsively and continuously fills the available\r\n        // space of its parent element automatically\r\n        <div>\r\n            <div\r\n                className=\"container\"\r\n                style={{\r\n                    height: '600px',\r\n                    display:'flex',\r\n                    flex:1\r\n                }}\r\n            >\r\n\r\n                <Chart data={data}  series={series} axes={props.axes} tooltip />\r\n            </div>\r\n        </div>\r\n    ) : (\r\n        <div>\r\n            <p>No data available</p>\r\n        </div>\r\n    );\r\n\r\n    return lineChart;\r\n}\r\n","import React from \"react\";\r\n\r\n\r\n\r\nfunction LoaderComponent(props) {\r\n\r\n    return (\r\n        <div className=\"loader center\">\r\n            <i className=\"fa fa-cog fa-spin fa-7x\" />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default LoaderComponent;\r\n","import React, {Component} from \"react\";\r\nimport CalendarComponent from \"../components/CalendarComponent\";\r\nimport DataComponent from \"../components/DataComponent\";\r\nimport moment from 'moment';\r\nimport tz from 'moment-timezone';\r\nimport SwitchComponent from \"../components/SwitchComponent\";\r\nimport ChartComponent from \"../components/Charts/ChartComponent\";\r\nimport LoaderComponent from \"../components/LoaderComponent\";\r\nclass HomePage extends Component{\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isLoading:true,\r\n            deathInWorld:0,\r\n            casesInWorld:0,\r\n            healedInWorld:0,\r\n            lastUpdate:null,\r\n            showCalendar:false,\r\n            timeseries:null,\r\n            period:null\r\n        };\r\n        this._handleChangeCalendar= this._handleChangeCalendar.bind(this);\r\n        this._handleToggleCalendar= this._handleToggleCalendar.bind(this);\r\n    }\r\n\r\n     async componentDidMount() {\r\n\r\n        if(this.props.items){\r\n\r\n            let {items} = this.props;\r\n\r\n            await this.setInitialState(items);\r\n\r\n            await this.updateChart(this.state.timeseries);\r\n            await this.setState({isReadyChart:true});\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    async updateChart(timeseries) {\r\n\r\n\r\n        await this.setState({filteredTimeseries:timeseries});\r\n\r\n        await this.prepareDataForChart(timeseries);\r\n    }\r\n\r\n    async setInitialState(items) {\r\n        await this.setState({\r\n            deathInWorld:items.deaths,\r\n            casesInWorld:items.confirmed,\r\n            healedInWorld:items.recovered,\r\n            lastUpdate: new Date(items.last_update),\r\n            isLoading:false,\r\n            timeseries:items.ts,\r\n            filteredTimeseries:[],\r\n            dataForChart:null,\r\n            isReadyChart:false,\r\n            chartAxes: [\r\n                {\r\n                    primary: true,\r\n                    type: 'time',\r\n                    time:{\r\n                        unit: 'day'\r\n                    },\r\n                    position: 'bottom'\r\n                },\r\n                { type: 'linear', position: 'left' }\r\n            ]\r\n        });\r\n    }\r\n\r\n    async prepareDataForChart(timeseries) {\r\n\r\n        let returnData=[];\r\n\r\n        await timeseries.reverse().map((data,index)=>{\r\n            let timestamp= moment.unix(data.t).tz('Europe/Rome');\r\n            returnData[index]={\r\n                label: timestamp.format('DD-MM-YYYY'),\r\n                data: [[timestamp.toDate(),data.c]]\r\n            }\r\n        });\r\n\r\n        await this.setState({dataForChart:returnData});\r\n\r\n\r\n    }\r\n\r\n    async filterSingleDate(date,timeseries) {\r\n\r\n        let singleDate= moment(date).tz(\"America/New_York\").format('YYYY-MM-DD');\r\n        let tsDate= moment(singleDate).format('X');\r\n        tsDate= parseInt(tsDate) +3600;\r\n        let dayBeforeTs= tsDate- 86400; //seconds in a day;\r\n        let filteredTimeseries=await timeseries.filter((value => {\r\n            return value.t>dayBeforeTs  && value.t <=tsDate;\r\n        }));\r\n        let dayBeforeStats= await timeseries.filter((value => {\r\n            return value.t>= dayBeforeTs;\r\n        }));\r\n\r\n        console.log(dayBeforeStats);\r\n\r\n        await this.updateChart(filteredTimeseries);\r\n\r\n        let deathInWorld=0;\r\n        let healedInWorld=0;\r\n        let casesInWorld=0;\r\n        let arrLen=filteredTimeseries.length;\r\n        if(arrLen>0){\r\n\r\n            deathInWorld= filteredTimeseries[0].d - dayBeforeStats[0].d;\r\n            healedInWorld= filteredTimeseries[0].r - dayBeforeStats[0].r;\r\n            casesInWorld= filteredTimeseries[0].c - dayBeforeStats[0].c;\r\n        }\r\n\r\n        return {\r\n            deathInWorld,\r\n            healedInWorld,\r\n            casesInWorld\r\n        };\r\n\r\n    }\r\n\r\n    async filterMultipleDates(dates,timeseries) {\r\n\r\n        let start_date= moment(dates[0]).tz('GMT').format('YYYY-MM-DD');\r\n        let end_date= moment(dates[1]).tz('GMT').format('YYYY-MM-DD');\r\n        let ts_start= moment(start_date).format('X');\r\n        let ts_end= parseInt(moment(end_date).format('X'));\r\n        ts_end+=3600;\r\n\r\n        let filteredTimeseries=await  timeseries.filter((value => {\r\n            return value.t>=ts_start  && value.t <=ts_end;\r\n        }));\r\n\r\n         this.updateChart(filteredTimeseries);\r\n\r\n        let deathInWorld=0;\r\n        let healedInWorld=0;\r\n        let casesInWorld=0;\r\n        let arrLen=filteredTimeseries.length;\r\n\r\n        if(arrLen>0){\r\n            let lastNotEmptyDate= filteredTimeseries[arrLen-1];\r\n\r\n            if(!lastNotEmptyDate.d){\r\n                lastNotEmptyDate= this.getLastNotEmptyDate(filteredTimeseries);\r\n\r\n            }\r\n\r\n            deathInWorld= filteredTimeseries[0].d;\r\n            healedInWorld= filteredTimeseries[0].r;\r\n            casesInWorld= filteredTimeseries[0].c;\r\n\r\n\r\n\r\n            if(arrLen>1){\r\n\r\n                deathInWorld =   lastNotEmptyDate.d -deathInWorld ;\r\n                healedInWorld = lastNotEmptyDate.r - healedInWorld;\r\n                casesInWorld = lastNotEmptyDate.c - casesInWorld;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            deathInWorld,\r\n            healedInWorld,\r\n            casesInWorld\r\n        };\r\n\r\n    }\r\n\r\n     _handleChangeCalendar=async (dates)=>{\r\n\r\n        this.setState({isReadyChart:false,isLoading:true,dataForChart:null});\r\n        let stats=null;\r\n        let {timeseries} = this.state;\r\n        if(dates.length>1){\r\n\r\n            stats=await this.filterMultipleDates(dates,timeseries);\r\n\r\n        } else {\r\n           stats=await this.filterSingleDate(dates[0],timeseries);\r\n\r\n        }\r\n\r\n\r\n\r\n        await this.setState({\r\n            casesInWorld:stats.casesInWorld,\r\n            deathInWorld:stats.deathInWorld,\r\n            healedInWorld:stats.healedInWorld,\r\n            period:dates\r\n        });\r\n\r\n         await this.setState({isReadyChart:true,isLoading:false});\r\n\r\n    }\r\n\r\n\r\n    getLastNotEmptyDate(filteredTimeseries) {\r\n\r\n        for (let key= 0; key<=filteredTimeseries.length;key++){\r\n\r\n            if(filteredTimeseries[key]){\r\n                return filteredTimeseries[key];\r\n            }\r\n\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    _handleToggleCalendar() {\r\n\r\n        this.setState({\r\n            showCalendar:!this.state.showCalendar\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n            let {isLoading,lastUpdate,showCalendar,dataForChart,chartAxes,isReadyChart,period}=this.state;\r\n            let formattedDate=null;\r\n            if(lastUpdate instanceof Date){\r\n                //getMonth returns value from 0\r\n                let month=lastUpdate.getMonth()+1;\r\n                formattedDate= lastUpdate.getDate()+'/'+ month +'/'+ lastUpdate.getFullYear();\r\n            }\r\n\r\n            let data= !isLoading && isReadyChart ? (\r\n                <div className=\"mt-5\">\r\n\r\n                    <div className=\"flex flex-center row\" style={{paddingLeft:30}}>\r\n                        <div className=\"col-md-6\">\r\n                            <p\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    flex: 1,\r\n                                    marginRight: 35,\r\n                                    justifyContent: 'flex-end'\r\n                                }}\r\n                            >\r\n                                {/*<a onClick={()=>this._handleToggleCalendar()}>Filter per date</a>*/}\r\n                                <SwitchComponent size=\"medium\" checked={showCalendar} onChange={this._handleToggleCalendar}   />\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div className=\"flex-row-start col-md-6\">\r\n                            {\r\n                                showCalendar ? (\r\n                                    <CalendarComponent dates={period} onChange={this._handleChangeCalendar}></CalendarComponent>\r\n                                ) : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        isReadyChart ? ( <ChartComponent data={dataForChart} axes={chartAxes} /> ) : null\r\n                    }\r\n\r\n                    <DataComponent {...this.state} formattedDate={formattedDate}></DataComponent>\r\n\r\n\r\n                </div>\r\n            ) : (\r\n                <LoaderComponent/>\r\n            );\r\n            return (\r\n                <div className=\"home\">\r\n                    {/*<div className=\"globe\">\r\n                        <i className=\"fa fa-globe fa-10x\" style={{color: '#fff'}}></i>\r\n                    </div>*/}\r\n                    {data}\r\n                </div>\r\n            )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport {Paper} from \"@material-ui/core\";\r\n\r\nexport default function NationDataComponent(props) {\r\n\r\n    let {todayCases,todayDeaths,casesPerOneMillion,deathsPerOneMillion}=props.data;\r\n    let {cases,deaths,recovered,active,critical}=props.data;\r\n    return (\r\n\r\n        <div className=\"flex flex-center mt-5 p-10\">\r\n            <div className=\"flex flex-center row col-md-12\">\r\n                <Paper className=\"col-md-5 mr-5 mb-5 nation-data-box\">\r\n                    <div className=\"p-5\">\r\n                        <p>Today</p>\r\n                        <p>Cases:  {todayCases??0}</p>\r\n                        <p>Deaths: {todayDeaths??0}</p>\r\n                        <p>Cases per one milion: {casesPerOneMillion??0}</p>\r\n                        <p>Cases per one milion: {deathsPerOneMillion??0}</p>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"col-md-5 mr-5 mb-5 nation-data-box \">\r\n                    <div className=\"p-5\">\r\n                        <p>Total</p>\r\n                        <p>Cases:  {cases??0}</p>\r\n                        <p>Deaths: {deaths??0}</p>\r\n                        <p>Recovered: {recovered??0}</p>\r\n                        <p>Critical: {critical??0}</p>\r\n                        <p>Active: {active??0}</p>\r\n                    </div>\r\n                </Paper>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Select from 'react-select';\r\nimport 'react-select/dist/react-select.css';\r\nimport Axios from \"axios\";\r\nimport LoaderComponent from \"../components/LoaderComponent\";\r\nimport NationDataComponent from \"../components/NationDataComponent\";\r\n\r\nclass Nations extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isLoading:true,\r\n            selectedOption:null,\r\n            nations:[],\r\n            data:null\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await Axios.get(`https://restcountries.eu/rest/v2/all`)\r\n        .then(res => {\r\n\r\n            let data=[];\r\n            res.data.map((nation)=>{\r\n\r\n                if(nation.name==='United States of America'){\r\n\r\n                    nation.name='USA';\r\n                }\r\n\r\n                data[data.length]= {\r\n                    value:nation.name.toLowerCase(),\r\n                    label:nation.name\r\n                }\r\n                return true;\r\n            });\r\n\r\n             this.setState({\r\n                nations:data\r\n             });\r\n\r\n        }).then(()=>this.setState({\r\n\r\n            isLoading:false\r\n        }));\r\n\r\n\r\n    }\r\n\r\n\r\n    _handleOnChange=async (selectedOption)=> {\r\n\r\n        if(selectedOption) {\r\n            this.setState({selectedOption, isLoading: true});\r\n            await this.fetchData(selectedOption);\r\n        } else {\r\n            this.setState({selectedOption:null,data:null});\r\n        }\r\n\r\n    }\r\n\r\n    async fetchData(selectedOption) {\r\n\r\n\r\n        await Axios.get(`https://coronavirus-19-api.herokuapp.com/countries/`+selectedOption.value)\r\n            .then(result => {\r\n\r\n                let {data,status}=result;\r\n                if(status===200){\r\n\r\n                    this.setState({\r\n                        data,\r\n\r\n                    });\r\n\r\n                }\r\n\r\n\r\n            }).then(()=>this.setState({\r\n\r\n                isLoading:false\r\n            }));\r\n    }\r\n\r\n    render() {\r\n\r\n        let {nations,isLoading,selectedOption,data}=this.state;\r\n\r\n        let dataComponent= (!data) ? null : ( <NationDataComponent data={data} ></NationDataComponent> );\r\n        let view= isLoading ? (\r\n            <LoaderComponent></LoaderComponent>\r\n        ) : (\r\n            <div>\r\n                <div className=\"flex flex-center mt-5\">\r\n                    <h2><p className=\"text-white\">Please select a nation</p></h2>\r\n\r\n                </div>\r\n                <div className=\"flex flex-center\">\r\n                    <Select\r\n                        className=\"nation-select\"\r\n                        name=\"form-field-name\"\r\n                        placeholder=\"Select a nation\"\r\n                        value={selectedOption}\r\n                        onChange={this._handleOnChange}\r\n                        options={nations}\r\n                    />\r\n                </div>\r\n                {dataComponent}\r\n            </div>\r\n        );\r\n        return (\r\n            <div className=\"App\">\r\n                {view}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default Nations;\r\n","import React from \"react\";\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport './DrawerComponent.css';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nexport default function DrawerComponent(props){\r\n\r\n    let options=[\r\n        {\r\n            name:'HomePage',\r\n            icon:'fa fa-globe',\r\n            isLink:true,\r\n            link:'HomePage'\r\n        },\r\n        {\r\n            name:'World Map',\r\n            icon:'fa fa-globe',\r\n            isLink:true,\r\n            link:'WorldMap'\r\n        },\r\n        {\r\n            name:'Nations',\r\n            icon:'fa fa-location-arrow',\r\n            isLink:true,\r\n            link:'Nations'\r\n        },\r\n    ];\r\n\r\n\r\n    return (\r\n\r\n        <Drawer className=\"drawer\" anchor={props.anchor} open={props.open} onClose={()=> props.onClose()}>\r\n            <List className=\"drawer-list\">\r\n                {\r\n                    options.map((option,index)=>(\r\n                        <Paper  key={index}>\r\n                            <ListItem key={index} button onClick={()=>props.onItemClick(option.link)} className=\"drawer-list-item\">\r\n                                <i className={option.icon}></i>\r\n                                <ListItemText className=\"ml-4 pt-2\" primary={<p>{option.name}</p>}></ListItemText>\r\n\r\n                            </ListItem>\r\n                        </Paper>\r\n                    ))\r\n                }\r\n            </List>\r\n        </Drawer>\r\n    );\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DrawerComponent from \"./Drawer/DrawerComponent\";\r\n\r\nexport default  class HeaderComponent extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            openDrawer:false\r\n        };\r\n    }\r\n\r\n    toggleDrawer= (openDrawer)=> this.setState({openDrawer});\r\n    render() {\r\n        let {openDrawer}= this.state;\r\n        let {drawerItemClick}= this.props;\r\n\r\n        return (\r\n            <div>\r\n                <DrawerComponent onItemClick={(page)=>drawerItemClick(page)} anchor=\"left\" open={openDrawer} onClose={()=>this.toggleDrawer(false)} />\r\n                <header className=\"App-header p-2   \">\r\n                    <a href=\"#\" onClick={()=>drawerItemClick('HomePage')}>\r\n                        <i className=\"fa fa-globe fa-2x mr-3\"></i>\r\n                        Covid Site\r\n                    </a>\r\n                    <div className=\"flex justify-content-end\">\r\n                        <Button variant=\"outlined\" onClick={()=>this.toggleDrawer(true)} ><i className=\"fa fa-bars fa-3x \"></i></Button>\r\n                    </div>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { memo } from \"react\";\r\nimport {\r\n    ZoomableGroup,\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography\r\n} from \"react-simple-maps\";\r\nimport Axios from \"axios\";\r\n\r\nconst geoUrl =\r\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\n/*const rounded = num => {\r\n    if (num > 1000000000) {\r\n        return Math.round(num / 100000000) / 10 + \"Bn\";\r\n    } else if (num > 1000000) {\r\n        return Math.round(num / 100000) / 10 + \"M\";\r\n    } else {\r\n        return Math.round(num / 100) / 10 + \"K\";\r\n    }\r\n};*/\r\n\r\nconst retrieveData=async (name)=>{\r\n    if(name==='United States of America'){\r\n\r\n        name='usa';\r\n    }\r\n    let returnData=null;\r\n     await Axios.get(`https://coronavirus-19-api.herokuapp.com/countries/`+name)\r\n        .then(result => {\r\n\r\n            console.log(result);\r\n            let {data,status}=result;\r\n\r\n            if(status===200){\r\n                returnData=data;\r\n\r\n            } else return false;\r\n\r\n    });\r\n\r\n     return returnData;\r\n}\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n\r\n    const showTooltipData =async function (NAME, POP_EST) {\r\n\r\n        let data = await retrieveData(NAME);\r\n        setTooltipContent(`${NAME}  <br/>\r\n         Cases: ${data.cases??0} <br/>\r\n         Deaths: ${data.deaths??0} <br/>\r\n         Recovered: ${data.recovered??0} <br/>\r\n         Active: ${data.active??0} <br/>\r\n         Critical: ${data.critical??0} <br/>\r\n        `\r\n        );\r\n    }\r\n    return (\r\n        <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n            <ZoomableGroup>\r\n                <Geographies geography={geoUrl}>\r\n                    {({ geographies }) =>\r\n                        geographies.map(geo => (\r\n                            <Geography\r\n                                key={geo.rsmKey}\r\n                                geography={geo}\r\n                                onMouseEnter={() => {\r\n                                    const { NAME, POP_EST } = geo.properties;\r\n                                    showTooltipData(NAME,POP_EST);\r\n                                }}\r\n                                onMouseLeave={() => {\r\n                                    setTooltipContent(\"\");\r\n                                }}\r\n                                style={{\r\n                                    default: {\r\n                                        fill: \"#D6D6DA\",\r\n                                        outline: \"none\"\r\n                                    },\r\n                                    hover: {\r\n                                        fill: \"#F53\",\r\n                                        outline: \"none\"\r\n                                    },\r\n                                    pressed: {\r\n                                        fill: \"#E42\",\r\n                                        outline: \"none\"\r\n                                    }\r\n                                }}\r\n                            />\r\n                        ))\r\n                    }\r\n                </Geographies>\r\n            </ZoomableGroup>\r\n        </ComposableMap>\r\n    );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, {useState} from \"react\";\r\nimport MapChart from \"../components/WorldMapComponent\";\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\nexport default function WorldMap(props) {\r\n\r\n    const [content, setContent] = useState(\"\");\r\n    return(\r\n        <div>\r\n            <MapChart setTooltipContent={setContent} />\r\n            <ReactTooltip html={true}>{content}</ReactTooltip>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from \"react\";\r\nimport LoaderComponent from \"../components/LoaderComponent\";\r\nimport HomePage from \"./HomePage\";\r\nimport Axios from \"axios\";\r\nimport Nations from \"./Nations\";\r\nimport HeaderComponent from \"../components/HeaderComponent\";\r\nimport WorldMap from \"./WorldMap\";\r\nexport default class Index extends Component{\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isLoading:true,\r\n            datas:null,\r\n            dataPerDate:null,\r\n            openDrawer:false,\r\n            currentPage:'HomePage'\r\n        };\r\n\r\n        this._handleDrawerItemClick= this._handleDrawerItemClick.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        Axios.get(`https://enrichman.github.io/covid19/world/data.json`)\r\n            .then(res => {\r\n                const datas = res.data;\r\n                this.setState({\r\n                    datas,\r\n                    dataPerDate: datas.ts.reverse()\r\n                });\r\n            }).then(()=>this.setState({\r\n\r\n            isLoading:false\r\n        }));\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    _handleDrawerItemClick= (currentPage)=>this.setState({currentPage,openDrawer:false});\r\n\r\n\r\n\r\n    render() {\r\n        let view = this.state.isLoading ? (\r\n            <LoaderComponent></LoaderComponent>\r\n        ) : (\r\n            <div>\r\n                <HeaderComponent openDrawer drawerItemClick={(page)=> this._handleDrawerItemClick(page)}></HeaderComponent>\r\n                { this.renderSwitchComponent() }\r\n            </div>\r\n        );\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                {view}\r\n            </div>\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    renderSwitchComponent() {\r\n\r\n        let {datas,dataPerDate,currentPage}= this.state;\r\n\r\n        switch (currentPage) {\r\n            case \"HomePage\":\r\n                return (<HomePage  items={datas} itemsPerDate={dataPerDate}></HomePage>);\r\n            case 'Nations':\r\n                return (<Nations></Nations>);\r\n\r\n            default:\r\n                return (<WorldMap></WorldMap>)\r\n        }\r\n    }\r\n}\r\n","import { createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\nexport default history;\r\n","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport HomePage from \"../screens/HomePage\";\r\nimport Index from \"../screens/Index\";\r\nimport Nations from \"../screens/Nations\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport history from '../services/history';\r\nexport default function Routes() {\r\n    return (\r\n        <BrowserRouter  basename={process.env.PUBLIC_URL}>\r\n            <Route history={history} >\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={Index} />\r\n                    <Route path=\"/home\" component={HomePage} />\r\n                    <Route path=\"/nations\" component={Nations} />\r\n\r\n                </Switch>\r\n            </Route>\r\n\r\n        </BrowserRouter>\r\n    );\r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Routes from './components/Routes';\n\nclass App extends Component{\n\n    /*constructor(props) {\n        super(props);\n    }\n*/\n    render() {\n\n        return(\n\n            <Routes />\n\n        )\n\n    }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}