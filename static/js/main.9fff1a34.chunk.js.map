{"version":3,"sources":["components/AccordionComponent.js","util/Util.js","components/CasesPerDate.js","components/CalendarComponent.js","screens/HomePage.js","components/LoaderComponent.js","screens/Index.js","screens/Nations.js","services/history.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["AccordionComponent","props","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","UNIX_timestamp","onlyDate","a","Date","months","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","time","timeConverter","this","maintext","Collapse","Body","cases","deaths","recovered","Component","CalendarComponent","state","date_start","date_end","value","options","mode","minDate","dateFormat","enableTime","onChange","dates","HomePage","isLoading","deathInWorld","casesInWorld","healedInWorld","lastUpdate","showCalendar","items","setState","confirmed","last_update","formattedDate","data","className","Intl","NumberFormat","format","style","paddingLeft","onClick","_handleToggleCalendar","display","flex","marginRight","justifyContent","color","LoaderComponent","Index","datas","dataPerDate","Axios","get","then","res","ts","reverse","view","to","itemsPerDate","Nations","history","createBrowserHistory","Routes","basename","process","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9fff1a34.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Accordion,Card,Button} from 'react-bootstrap';\r\nimport {timeConverter} from \"../util/Util\";\r\n\r\nexport default class AccordionComponent extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Accordion defaultActiveKey=\"1\">\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                            {timeConverter(this.props.maintext)}\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n\r\n                            Cases : {this.props.cases} <br/>\r\n                            Deaths : {this.props.deaths} <br/>\r\n                            Recovered : {this.props.recovered}\r\n\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n","\r\n\r\nexport function timeConverter(UNIX_timestamp,onlyDate=true){\r\n    var a = new Date(UNIX_timestamp * 1000);\r\n    var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    var year = a.getFullYear();\r\n    var month = months[a.getMonth()];\r\n    var date = a.getDate();\r\n    var hour = a.getHours();\r\n    var min = a.getMinutes();\r\n    var sec = a.getSeconds();\r\n    var time = date + ' ' + month + ' ' + year;\r\n    if(!onlyDate){\r\n        time +=' ' + hour + ':' + min + ':' + sec ;\r\n    }\r\n    return time;\r\n}\r\n\r\n","import React, {Component} from \"react\";\r\nimport AccordionComponent from \"./AccordionComponent\";\r\n\r\nclass CasesPerDate extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            data:null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n            data: this.props.dates\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let {data}= this.state;\r\n        let dates=null;\r\n        if(data){\r\n\r\n            dates=data.map((date)=>{\r\n\r\n                console.log(date);\r\n                return <AccordionComponent maintext={date.t} deaths={date.d} recovered={date.r} cases={date.c} ></AccordionComponent>\r\n            });\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {dates}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CasesPerDate;\r\n","import React, {Component} from \"react\";\r\nimport \"flatpickr/dist/themes/material_green.css\";\r\nimport FlatPickr from 'react-flatpickr';\r\nexport default class CalendarComponent extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            date_start:new Date(),\r\n            date_end:null\r\n        };\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <FlatPickr\r\n                value={this.state.date_start}\r\n                options={{\r\n                    mode:'range',\r\n                    minDate: \"today\",\r\n                    dateFormat: \"d/m/Y\",\r\n                    enableTime:true,\r\n                }}\r\n                onChange={(dates)=>{\r\n\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\n}\r\n","import React, {Component} from \"react\";\r\nimport CasesPerDate from \"../components/CasesPerDate\";\r\nimport CalendarComponent from \"../components/CalendarComponent\";\r\n\r\nclass HomePage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isLoading:true,\r\n            deathInWorld:0,\r\n            casesInWorld:0,\r\n            healedInWorld:0,\r\n            lastUpdate:null,\r\n            showCalendar:false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if(this.props.items){\r\n\r\n            let {items} = this.props;\r\n\r\n            this.setState({\r\n                deathInWorld:items.deaths,\r\n                casesInWorld:items.confirmed,\r\n                healedInWorld:items.recovered,\r\n                lastUpdate: new Date(items.last_update),\r\n                isLoading:false\r\n            });\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n            let {isLoading,lastUpdate}=this.state;\r\n            let formattedDate=null;\r\n            if(lastUpdate instanceof Date){\r\n                //getMonth returns value from 0\r\n                let month=lastUpdate.getMonth()+1;\r\n                formattedDate= lastUpdate.getDate()+'/'+ month +'/'+ lastUpdate.getFullYear();\r\n            }\r\n            let data= !isLoading ? (\r\n                <div>\r\n\r\n\r\n                    <div className=\"container\">\r\n                        <div>\r\n                            <p>Total Coronavirus cases in the world : {new Intl.NumberFormat('it-IT').format(this.state.casesInWorld)}</p>\r\n                        </div>\r\n                        <div>\r\n                            <p>Total deaths in the world : {new Intl.NumberFormat('it-IT').format(this.state.deathInWorld)}</p>\r\n                        </div>\r\n                        <div>\r\n                            <p>Total healed in the world : {new Intl.NumberFormat('it-IT').format(this.state.healedInWorld)}</p>\r\n                        </div>\r\n                        <div>\r\n                            <p> Last update info : {  formattedDate }</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"flex flex-center\" style={{paddingLeft:30}}>\r\n                            <p\r\n                                onClick={()=>this._handleToggleCalendar()}\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    flex: 1,\r\n                                    marginRight: 35,\r\n                                    justifyContent: 'flex-end'\r\n                                }}\r\n                            ><a>Filter per date</a></p>\r\n\r\n                            <div className=\"flex-row-start\">\r\n                                {\r\n                                    this.state.showCalendar ? (\r\n                                        <CalendarComponent></CalendarComponent>\r\n                                    ) : null\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            ) : null;\r\n            return (\r\n                <div className=\"home\">\r\n                    <div className=\"globe\">\r\n                        <i className=\"fa fa-globe fa-10x\" style={{color: '#fff'}}></i>\r\n                    </div>\r\n                    {data}\r\n                </div>\r\n            )\r\n    }\r\n\r\n    _handleToggleCalendar() {\r\n\r\n        this.setState({\r\n            showCalendar:!this.state.showCalendar\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, {Component} from \"react\";\r\n\r\n\r\n\r\nclass LoaderComponent extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loader center\">\r\n                <i className=\"fa fa-cog fa-spin fa-7x\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default LoaderComponent;\r\n","import React, {Component} from \"react\";\r\nimport LoaderComponent from \"../components/LoaderComponent\";\r\nimport HomePage from \"./HomePage\";\r\nimport Axios from \"axios\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class Index extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isLoading:true,\r\n            datas:null,\r\n            dataPerDate:null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        Axios.get(`https://enrichman.github.io/covid19/world/full.json`)\r\n            .then(res => {\r\n                const datas = res.data;\r\n                this.setState({\r\n                    datas,\r\n                    dataPerDate: datas.ts.reverse()\r\n                });\r\n            }).then(()=>this.setState({\r\n            isLoading:false\r\n        }));\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        let {datas,dataPerDate}= this.state;\r\n        let view = this.state.isLoading ? (\r\n            <LoaderComponent></LoaderComponent>\r\n        ) : (\r\n            <div>\r\n                <header className=\"App-header\">\r\n                    <p>Covid Site</p>\r\n                    <div className=\"header-right\">\r\n                        <p>\r\n                            <Link to=\"/nations\" className=\"link\">Nations</Link>\r\n                        </p>\r\n                    </div>\r\n                </header>\r\n                <HomePage  items={datas} itemsPerDate={dataPerDate}></HomePage>\r\n            </div>\r\n        );\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                {view}\r\n            </div>\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\n\r\nclass Nations extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Nations</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default Nations;\r\n","import { createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\nexport default history;\r\n","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport HomePage from \"../screens/HomePage\";\r\nimport Index from \"../screens/Index\";\r\nimport Nations from \"../screens/Nations\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport history from '../services/history';\r\nexport default function Routes() {\r\n    return (\r\n        <BrowserRouter history={history} basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Index} />\r\n                <Route path=\"/home\" component={HomePage} />\r\n                <Route path=\"/nations\" component={Nations} />\r\n\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n","import React, {Component} from 'react';\nimport {Switch,Route} from 'react-router-dom';\nimport './App.css';\nimport { Router } from 'react-router-dom';\nimport Routes from './components/Routes';\n\nclass App extends Component{\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        return(\n\n            <Routes />\n\n        )\n\n    }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}